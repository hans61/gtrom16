
C:\Users\hjjac\AppData\Local\Temp\arduino_build_511375/ROM_Switcher.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
   0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	7e c1       	rjmp	.+764    	; 0x314 <__vector_11>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>
  1e:	1a c0       	rjmp	.+52     	; 0x54 <__bad_interrupt>
  20:	19 c0       	rjmp	.+50     	; 0x54 <__bad_interrupt>

00000022 <__ctors_end>:
__trampolines_start():
  22:	11 24       	eor	r1, r1
  24:	1f be       	out	0x3f, r1	; 63
  26:	cf ed       	ldi	r28, 0xDF	; 223
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_copy_data>:
__do_copy_data():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/tiny-stack/libgcc/../../../../../gcc/libgcc/config/avr/lib1funcs.S:2409
  2a:	10 e0       	ldi	r17, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/tiny-stack/libgcc/../../../../../gcc/libgcc/config/avr/lib1funcs.S:2410
  2c:	a0 e6       	ldi	r26, 0x60	; 96
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/tiny-stack/libgcc/../../../../../gcc/libgcc/config/avr/lib1funcs.S:2411
  2e:	b0 e0       	ldi	r27, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/tiny-stack/libgcc/../../../../../gcc/libgcc/config/avr/lib1funcs.S:2412
  30:	e4 eb       	ldi	r30, 0xB4	; 180
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/tiny-stack/libgcc/../../../../../gcc/libgcc/config/avr/lib1funcs.S:2413
  32:	f4 e0       	ldi	r31, 0x04	; 4
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/tiny-stack/libgcc/../../../../../gcc/libgcc/config/avr/lib1funcs.S:2414
  34:	02 c0       	rjmp	.+4      	; 0x3a <__do_copy_data+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/tiny-stack/libgcc/../../../../../gcc/libgcc/config/avr/lib1funcs.S:2417
  36:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/tiny-stack/libgcc/../../../../../gcc/libgcc/config/avr/lib1funcs.S:2422
  38:	0d 92       	st	X+, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/tiny-stack/libgcc/../../../../../gcc/libgcc/config/avr/lib1funcs.S:2424
  3a:	a6 37       	cpi	r26, 0x76	; 118
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/tiny-stack/libgcc/../../../../../gcc/libgcc/config/avr/lib1funcs.S:2425
  3c:	b1 07       	cpc	r27, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/tiny-stack/libgcc/../../../../../gcc/libgcc/config/avr/lib1funcs.S:2426
  3e:	d9 f7       	brne	.-10     	; 0x36 <__do_copy_data+0xc>

00000040 <__do_clear_bss>:
__do_clear_bss():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/tiny-stack/libgcc/../../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
  40:	20 e0       	ldi	r18, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/tiny-stack/libgcc/../../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
  42:	a6 e7       	ldi	r26, 0x76	; 118
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/tiny-stack/libgcc/../../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
  44:	b0 e0       	ldi	r27, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/tiny-stack/libgcc/../../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/tiny-stack/libgcc/../../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/tiny-stack/libgcc/../../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
  4a:	ab 38       	cpi	r26, 0x8B	; 139
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/tiny-stack/libgcc/../../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
  4c:	b2 07       	cpc	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/tiny-stack/libgcc/../../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
.do_clear_bss_start():
  50:	15 d2       	rcall	.+1066   	; 0x47c <main>
  52:	2e c2       	rjmp	.+1116   	; 0x4b0 <_exit>

00000054 <__bad_interrupt>:
__vector_1():
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <setDisplay(unsigned char) [clone .part.3]>:
_Z10setDisplayh():
Q:\git\hans61\gtrom16\ROM_Switcher/ROM_Switcher.ino:96
  }
}

// print char
void setDisplay(byte id) {
  if (id < 20) PORTA = (PORTA & 0x80) | display[id];
  56:	9b b3       	in	r25, 0x1b	; 27
  58:	90 78       	andi	r25, 0x80	; 128
  5a:	e8 2f       	mov	r30, r24
  5c:	f0 e0       	ldi	r31, 0x00	; 0
  5e:	ee 59       	subi	r30, 0x9E	; 158
  60:	ff 4f       	sbci	r31, 0xFF	; 255
  62:	80 81       	ld	r24, Z
  64:	89 2b       	or	r24, r25
  66:	8b bb       	out	0x1b, r24	; 27
Q:\git\hans61\gtrom16\ROM_Switcher/ROM_Switcher.ino:97
}
  68:	08 95       	ret

0000006a <EERef::update(unsigned char)>:
_ZN5EERef6updateEh():
C:\Users\hjjac\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\EEPROM/EEPROM.h:74
    EERef &operator &=( uint8_t in )     { return *this = **this & in; }
    EERef &operator |=( uint8_t in )     { return *this = **this | in; }
    EERef &operator <<=( uint8_t in )    { return *this = **this << in; }
    EERef &operator >>=( uint8_t in )    { return *this = **this >> in; }

    EERef &update( uint8_t in )          { return  in != *this ? *this = in : *this; }
  6a:	ff 92       	push	r15
  6c:	0f 93       	push	r16
  6e:	1f 93       	push	r17
  70:	cf 93       	push	r28
  72:	df 93       	push	r29
  74:	ec 01       	movw	r28, r24
  76:	f6 2e       	mov	r15, r22
_ZNK5EERefdeEv():
C:\Users\hjjac\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\EEPROM/EEPROM.h:53

    EERef( const int index )
        : index( index )                 {}

    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
  78:	08 81       	ld	r16, Y
  7a:	19 81       	ldd	r17, Y+1	; 0x01
  7c:	c8 01       	movw	r24, r16
  7e:	02 d2       	rcall	.+1028   	; 0x484 <eeprom_read_byte>
_ZN5EERef6updateEh():
C:\Users\hjjac\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\EEPROM/EEPROM.h:74
    EERef &operator &=( uint8_t in )     { return *this = **this & in; }
    EERef &operator |=( uint8_t in )     { return *this = **this | in; }
    EERef &operator <<=( uint8_t in )    { return *this = **this << in; }
    EERef &operator >>=( uint8_t in )    { return *this = **this >> in; }

    EERef &update( uint8_t in )          { return  in != *this ? *this = in : *this; }
  80:	f8 16       	cp	r15, r24
  82:	19 f0       	breq	.+6      	; 0x8a <EERef::update(unsigned char)+0x20>
_ZN5EERefaSEh():
C:\Users\hjjac\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\EEPROM/EEPROM.h:61
    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    #if  (defined(__AVR_ATtinyX41__) && F_CPU==16000000 && CLOCK_SOURCE==0)
      EERef &operator=( uint8_t in )       { return safe_eeprom_write_byte( (uint8_t*) index, in ), *this;  }
    #else
      EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
  84:	6f 2d       	mov	r22, r15
  86:	c8 01       	movw	r24, r16
  88:	05 d2       	rcall	.+1034   	; 0x494 <eeprom_write_byte>
_ZN5EERef6updateEh():
C:\Users\hjjac\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\EEPROM/EEPROM.h:74 (discriminator 4)
    EERef &operator &=( uint8_t in )     { return *this = **this & in; }
    EERef &operator |=( uint8_t in )     { return *this = **this | in; }
    EERef &operator <<=( uint8_t in )    { return *this = **this << in; }
    EERef &operator >>=( uint8_t in )    { return *this = **this >> in; }

    EERef &update( uint8_t in )          { return  in != *this ? *this = in : *this; }
  8a:	ce 01       	movw	r24, r28
  8c:	df 91       	pop	r29
  8e:	cf 91       	pop	r28
  90:	1f 91       	pop	r17
  92:	0f 91       	pop	r16
  94:	ff 90       	pop	r15
  96:	08 95       	ret

00000098 <getButton()>:
_Z9getButtonv():
Q:\git\hans61\gtrom16\ROM_Switcher/ROM_Switcher.ino:56
// 2 = Key pressed shorter 50 ms
// 3 = Key was pressed
// 4 = Key was pressed for a long time (>1 seconds)
// 5 = Key was pressed for a very long time (>3 seconds)
// 6 = Key released for a long time (>2 seconds)
byte getButton() {
  98:	0f 93       	push	r16
  9a:	1f 93       	push	r17
Q:\git\hans61\gtrom16\ROM_Switcher/ROM_Switcher.ino:57
  if ((millis() - lastAction) > 50 ) {
  9c:	85 d1       	rcall	.+778    	; 0x3a8 <millis>
  9e:	00 91 77 00 	lds	r16, 0x0077	; 0x800077 <lastAction>
  a2:	10 91 78 00 	lds	r17, 0x0078	; 0x800078 <lastAction+0x1>
  a6:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <lastAction+0x2>
  aa:	30 91 7a 00 	lds	r19, 0x007A	; 0x80007a <lastAction+0x3>
  ae:	60 1b       	sub	r22, r16
  b0:	71 0b       	sbc	r23, r17
  b2:	82 0b       	sbc	r24, r18
  b4:	93 0b       	sbc	r25, r19
  b6:	63 33       	cpi	r22, 0x33	; 51
  b8:	71 05       	cpc	r23, r1
  ba:	81 05       	cpc	r24, r1
  bc:	91 05       	cpc	r25, r1
  be:	08 f4       	brcc	.+2      	; 0xc2 <getButton()+0x2a>
  c0:	7e c0       	rjmp	.+252    	; 0x1be <__stack+0xdf>
  c2:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <__data_end>
Q:\git\hans61\gtrom16\ROM_Switcher/ROM_Switcher.ino:58
    if ((PINB & (1 << 3)) == 0) { // Key pressed
  c6:	b3 99       	sbic	0x16, 3	; 22
  c8:	27 c0       	rjmp	.+78     	; 0x118 <__stack+0x39>
Q:\git\hans61\gtrom16\ROM_Switcher/ROM_Switcher.ino:59
      if (lastButtonState == 0) { // not pressed before
  ca:	81 11       	cpse	r24, r1
  cc:	0f c0       	rjmp	.+30     	; 0xec <__stack+0xd>
Q:\git\hans61\gtrom16\ROM_Switcher/ROM_Switcher.ino:60
        lastButtonState = 1;
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__data_end>
Q:\git\hans61\gtrom16\ROM_Switcher/ROM_Switcher.ino:61
        lastAction = millis();
  d4:	69 d1       	rcall	.+722    	; 0x3a8 <millis>
  d6:	60 93 77 00 	sts	0x0077, r22	; 0x800077 <lastAction>
  da:	70 93 78 00 	sts	0x0078, r23	; 0x800078 <lastAction+0x1>
  de:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <lastAction+0x2>
  e2:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <lastAction+0x3>
Q:\git\hans61\gtrom16\ROM_Switcher/ROM_Switcher.ino:88
        //        if (buttonTime > 3000) {
        //          return 1;
        //        }
      }
    }
    return lastButtonState;
  e6:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <__data_end>
  ea:	51 c0       	rjmp	.+162    	; 0x18e <__stack+0xaf>
Q:\git\hans61\gtrom16\ROM_Switcher/ROM_Switcher.ino:63
    if ((PINB & (1 << 3)) == 0) { // Key pressed
      if (lastButtonState == 0) { // not pressed before
        lastButtonState = 1;
        lastAction = millis();
      } else { // Key is still pressed
        if ((millis() - lastAction) > 5000) lastButtonState = 5;
  ec:	5d d1       	rcall	.+698    	; 0x3a8 <millis>
  ee:	00 91 77 00 	lds	r16, 0x0077	; 0x800077 <lastAction>
  f2:	10 91 78 00 	lds	r17, 0x0078	; 0x800078 <lastAction+0x1>
  f6:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <lastAction+0x2>
  fa:	30 91 7a 00 	lds	r19, 0x007A	; 0x80007a <lastAction+0x3>
  fe:	60 1b       	sub	r22, r16
 100:	71 0b       	sbc	r23, r17
 102:	82 0b       	sbc	r24, r18
 104:	93 0b       	sbc	r25, r19
 106:	69 38       	cpi	r22, 0x89	; 137
 108:	73 41       	sbci	r23, 0x13	; 19
 10a:	81 05       	cpc	r24, r1
 10c:	91 05       	cpc	r25, r1
 10e:	58 f3       	brcs	.-42     	; 0xe6 <__stack+0x7>
 110:	85 e0       	ldi	r24, 0x05	; 5
Q:\git\hans61\gtrom16\ROM_Switcher/ROM_Switcher.ino:81
        } else {
          //lastButtonState = 1;
          return 2;
        }
      } else {                 // Key is not pressed and was not pressed
        if ((millis() - lastAction) > 2000) lastButtonState = 6;
 112:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__data_end>
 116:	e7 cf       	rjmp	.-50     	; 0xe6 <__stack+0x7>
Q:\git\hans61\gtrom16\ROM_Switcher/ROM_Switcher.ino:66
        lastAction = millis();
      } else { // Key is still pressed
        if ((millis() - lastAction) > 5000) lastButtonState = 5;
      }
    } else {                     // Key released
      if (lastButtonState > 0) { // Key was pressed [Taste war gedrückt, wurde eben losgelassen]
 118:	88 23       	and	r24, r24
 11a:	e1 f1       	breq	.+120    	; 0x194 <__stack+0xb5>
Q:\git\hans61\gtrom16\ROM_Switcher/ROM_Switcher.ino:67
        lastButtonState = 0;
 11c:	10 92 76 00 	sts	0x0076, r1	; 0x800076 <__data_end>
Q:\git\hans61\gtrom16\ROM_Switcher/ROM_Switcher.ino:68
        buttonTime = millis() - lastAction;
 120:	43 d1       	rcall	.+646    	; 0x3a8 <millis>
 122:	00 91 77 00 	lds	r16, 0x0077	; 0x800077 <lastAction>
 126:	10 91 78 00 	lds	r17, 0x0078	; 0x800078 <lastAction+0x1>
 12a:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <lastAction+0x2>
 12e:	30 91 7a 00 	lds	r19, 0x007A	; 0x80007a <lastAction+0x3>
 132:	60 1b       	sub	r22, r16
 134:	71 0b       	sbc	r23, r17
 136:	82 0b       	sbc	r24, r18
 138:	93 0b       	sbc	r25, r19
 13a:	60 93 7b 00 	sts	0x007B, r22	; 0x80007b <buttonTime>
 13e:	70 93 7c 00 	sts	0x007C, r23	; 0x80007c <buttonTime+0x1>
 142:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <buttonTime+0x2>
 146:	90 93 7e 00 	sts	0x007E, r25	; 0x80007e <buttonTime+0x3>
Q:\git\hans61\gtrom16\ROM_Switcher/ROM_Switcher.ino:69
        lastAction = millis();
 14a:	2e d1       	rcall	.+604    	; 0x3a8 <millis>
 14c:	60 93 77 00 	sts	0x0077, r22	; 0x800077 <lastAction>
 150:	70 93 78 00 	sts	0x0078, r23	; 0x800078 <lastAction+0x1>
 154:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <lastAction+0x2>
 158:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <lastAction+0x3>
Q:\git\hans61\gtrom16\ROM_Switcher/ROM_Switcher.ino:70
        if (buttonTime > 3000) {
 15c:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <buttonTime>
 160:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <buttonTime+0x1>
 164:	a0 91 7d 00 	lds	r26, 0x007D	; 0x80007d <buttonTime+0x2>
 168:	b0 91 7e 00 	lds	r27, 0x007E	; 0x80007e <buttonTime+0x3>
 16c:	89 3b       	cpi	r24, 0xB9	; 185
 16e:	2b e0       	ldi	r18, 0x0B	; 11
 170:	92 07       	cpc	r25, r18
 172:	a1 05       	cpc	r26, r1
 174:	b1 05       	cpc	r27, r1
 176:	2c f5       	brge	.+74     	; 0x1c2 <__stack+0xe3>
Q:\git\hans61\gtrom16\ROM_Switcher/ROM_Switcher.ino:72
          return 5;
        } else if (buttonTime > 1000) {
 178:	89 3e       	cpi	r24, 0xE9	; 233
 17a:	23 e0       	ldi	r18, 0x03	; 3
 17c:	92 07       	cpc	r25, r18
 17e:	a1 05       	cpc	r26, r1
 180:	b1 05       	cpc	r27, r1
 182:	0c f5       	brge	.+66     	; 0x1c6 <__stack+0xe7>
Q:\git\hans61\gtrom16\ROM_Switcher/ROM_Switcher.ino:74
          return 4;
        } else if (buttonTime > 50) {
 184:	c3 97       	sbiw	r24, 0x33	; 51
 186:	a1 05       	cpc	r26, r1
 188:	b1 05       	cpc	r27, r1
 18a:	fc f0       	brlt	.+62     	; 0x1ca <__stack+0xeb>
Q:\git\hans61\gtrom16\ROM_Switcher/ROM_Switcher.ino:75
          return 3;
 18c:	83 e0       	ldi	r24, 0x03	; 3
Q:\git\hans61\gtrom16\ROM_Switcher/ROM_Switcher.ino:92
    }
    return lastButtonState;
  } else {                  // Debounce time
    return 0;
  }
}
 18e:	1f 91       	pop	r17
 190:	0f 91       	pop	r16
 192:	08 95       	ret
Q:\git\hans61\gtrom16\ROM_Switcher/ROM_Switcher.ino:81
        } else {
          //lastButtonState = 1;
          return 2;
        }
      } else {                 // Key is not pressed and was not pressed
        if ((millis() - lastAction) > 2000) lastButtonState = 6;
 194:	09 d1       	rcall	.+530    	; 0x3a8 <millis>
 196:	00 91 77 00 	lds	r16, 0x0077	; 0x800077 <lastAction>
 19a:	10 91 78 00 	lds	r17, 0x0078	; 0x800078 <lastAction+0x1>
 19e:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <lastAction+0x2>
 1a2:	30 91 7a 00 	lds	r19, 0x007A	; 0x80007a <lastAction+0x3>
 1a6:	60 1b       	sub	r22, r16
 1a8:	71 0b       	sbc	r23, r17
 1aa:	82 0b       	sbc	r24, r18
 1ac:	93 0b       	sbc	r25, r19
 1ae:	61 3d       	cpi	r22, 0xD1	; 209
 1b0:	77 40       	sbci	r23, 0x07	; 7
 1b2:	81 05       	cpc	r24, r1
 1b4:	91 05       	cpc	r25, r1
 1b6:	08 f4       	brcc	.+2      	; 0x1ba <__stack+0xdb>
 1b8:	96 cf       	rjmp	.-212    	; 0xe6 <__stack+0x7>
 1ba:	86 e0       	ldi	r24, 0x06	; 6
 1bc:	aa cf       	rjmp	.-172    	; 0x112 <__stack+0x33>
Q:\git\hans61\gtrom16\ROM_Switcher/ROM_Switcher.ino:90
        //        }
      }
    }
    return lastButtonState;
  } else {                  // Debounce time
    return 0;
 1be:	80 e0       	ldi	r24, 0x00	; 0
 1c0:	e6 cf       	rjmp	.-52     	; 0x18e <__stack+0xaf>
Q:\git\hans61\gtrom16\ROM_Switcher/ROM_Switcher.ino:71
      if (lastButtonState > 0) { // Key was pressed [Taste war gedrückt, wurde eben losgelassen]
        lastButtonState = 0;
        buttonTime = millis() - lastAction;
        lastAction = millis();
        if (buttonTime > 3000) {
          return 5;
 1c2:	85 e0       	ldi	r24, 0x05	; 5
 1c4:	e4 cf       	rjmp	.-56     	; 0x18e <__stack+0xaf>
Q:\git\hans61\gtrom16\ROM_Switcher/ROM_Switcher.ino:73
        } else if (buttonTime > 1000) {
          return 4;
 1c6:	84 e0       	ldi	r24, 0x04	; 4
 1c8:	e2 cf       	rjmp	.-60     	; 0x18e <__stack+0xaf>
Q:\git\hans61\gtrom16\ROM_Switcher/ROM_Switcher.ino:78
        } else if (buttonTime > 50) {
          return 3;
        } else {
          //lastButtonState = 1;
          return 2;
 1ca:	82 e0       	ldi	r24, 0x02	; 2
 1cc:	e0 cf       	rjmp	.-64     	; 0x18e <__stack+0xaf>

000001ce <setDisplay(unsigned char)>:
_Z10setDisplayh():
Q:\git\hans61\gtrom16\ROM_Switcher/ROM_Switcher.ino:96
  }
}

// print char
void setDisplay(byte id) {
  if (id < 20) PORTA = (PORTA & 0x80) | display[id];
 1ce:	84 31       	cpi	r24, 0x14	; 20
 1d0:	08 f4       	brcc	.+2      	; 0x1d4 <setDisplay(unsigned char)+0x6>
 1d2:	41 cf       	rjmp	.-382    	; 0x56 <setDisplay(unsigned char) [clone .part.3]>
Q:\git\hans61\gtrom16\ROM_Switcher/ROM_Switcher.ino:97
}
 1d4:	08 95       	ret

000001d6 <setAddress(unsigned char)>:
_Z10setAddressh():
Q:\git\hans61\gtrom16\ROM_Switcher/ROM_Switcher.ino:101

// Select ROM bank, activate
void setAddress(byte id) {
  PORTB = (PORTB & 0b11111000) | (id & 0b00000111);
 1d6:	98 b3       	in	r25, 0x18	; 24
 1d8:	98 7f       	andi	r25, 0xF8	; 248
 1da:	28 2f       	mov	r18, r24
 1dc:	27 70       	andi	r18, 0x07	; 7
 1de:	92 2b       	or	r25, r18
 1e0:	98 bb       	out	0x18, r25	; 24
Q:\git\hans61\gtrom16\ROM_Switcher/ROM_Switcher.ino:102
  if ((id & 0b00001000) == 0) {
 1e2:	83 fd       	sbrc	r24, 3
 1e4:	02 c0       	rjmp	.+4      	; 0x1ea <setAddress(unsigned char)+0x14>
Q:\git\hans61\gtrom16\ROM_Switcher/ROM_Switcher.ino:103
    PORTA = PORTA & 0b01111111;
 1e6:	df 98       	cbi	0x1b, 7	; 27
 1e8:	08 95       	ret
Q:\git\hans61\gtrom16\ROM_Switcher/ROM_Switcher.ino:105
  } else {
    PORTA = (PORTA & 0b01111111) | 0b10000000;
 1ea:	df 9a       	sbi	0x1b, 7	; 27
Q:\git\hans61\gtrom16\ROM_Switcher/ROM_Switcher.ino:107
  }
}
 1ec:	08 95       	ret

000001ee <writeEEPROM()>:
_Z11writeEEPROMv():
Q:\git\hans61\gtrom16\ROM_Switcher/ROM_Switcher.ino:109

void writeEEPROM() {
 1ee:	0f 93       	push	r16
 1f0:	1f 93       	push	r17
 1f2:	cf 93       	push	r28
 1f4:	df 93       	push	r29
 1f6:	00 d0       	rcall	.+0      	; 0x1f8 <writeEEPROM()+0xa>
 1f8:	cd b7       	in	r28, 0x3d	; 61
 1fa:	dd 27       	eor	r29, r29
Q:\git\hans61\gtrom16\ROM_Switcher/ROM_Switcher.ino:110
  if (eepromAddr < 2 || eepromAddr > 128) { // Address must be even and between 2..128
 1fc:	80 91 7f 00 	lds	r24, 0x007F	; 0x80007f <eepromAddr>
 200:	82 50       	subi	r24, 0x02	; 2
 202:	8f 37       	cpi	r24, 0x7F	; 127
 204:	48 f0       	brcs	.+18     	; 0x218 <writeEEPROM()+0x2a>
Q:\git\hans61\gtrom16\ROM_Switcher/ROM_Switcher.ino:111
    eepromAddr = 2;
 206:	82 e0       	ldi	r24, 0x02	; 2
 208:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <eepromAddr>
_ZN5EERefC4Ei():
C:\Users\hjjac\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\EEPROM/EEPROM.h:50
#endif

struct EERef{

    EERef( const int index )
        : index( index )                 {}
 20c:	1a 82       	std	Y+2, r1	; 0x02
 20e:	19 82       	std	Y+1, r1	; 0x01
_ZN11EEPROMClass6updateEih():
C:\Users\hjjac\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\EEPROM/EEPROM.h:137

    //Basic user access methods.
    EERef operator[]( const int idx )    { return idx; }
    uint8_t read( int idx )              { return EERef( idx ); }
    void write( int idx, uint8_t val )   { (EERef( idx )) = val; }
    void update( int idx, uint8_t val )  { EERef( idx ).update( val ); }
 210:	62 e0       	ldi	r22, 0x02	; 2
 212:	ce 01       	movw	r24, r28
 214:	01 96       	adiw	r24, 0x01	; 1
 216:	29 df       	rcall	.-430    	; 0x6a <EERef::update(unsigned char)>
_Z11writeEEPROMv():
Q:\git\hans61\gtrom16\ROM_Switcher/ROM_Switcher.ino:114
    EEPROM.update(ADDR, eepromAddr);
  }
  tmp = EEPROM.read(eepromAddr + 1);        // Increase write counter for cell
 218:	00 91 7f 00 	lds	r16, 0x007F	; 0x80007f <eepromAddr>
 21c:	10 e0       	ldi	r17, 0x00	; 0
 21e:	0f 5f       	subi	r16, 0xFF	; 255
 220:	1f 4f       	sbci	r17, 0xFF	; 255
_ZNK5EERefdeEv():
C:\Users\hjjac\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\EEPROM/EEPROM.h:53

    EERef( const int index )
        : index( index )                 {}

    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
 222:	c8 01       	movw	r24, r16
 224:	2f d1       	rcall	.+606    	; 0x484 <eeprom_read_byte>
_Z11writeEEPROMv():
Q:\git\hans61\gtrom16\ROM_Switcher/ROM_Switcher.ino:115
  tmp--;
 226:	6f ef       	ldi	r22, 0xFF	; 255
 228:	68 0f       	add	r22, r24
 22a:	60 93 81 00 	sts	0x0081, r22	; 0x800081 <tmp>
_ZN5EERefC4Ei():
C:\Users\hjjac\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\EEPROM/EEPROM.h:50
#endif

struct EERef{

    EERef( const int index )
        : index( index )                 {}
 22e:	1a 83       	std	Y+2, r17	; 0x02
 230:	09 83       	std	Y+1, r16	; 0x01
_ZN11EEPROMClass6updateEih():
C:\Users\hjjac\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\EEPROM/EEPROM.h:137

    //Basic user access methods.
    EERef operator[]( const int idx )    { return idx; }
    uint8_t read( int idx )              { return EERef( idx ); }
    void write( int idx, uint8_t val )   { (EERef( idx )) = val; }
    void update( int idx, uint8_t val )  { EERef( idx ).update( val ); }
 232:	ce 01       	movw	r24, r28
 234:	01 96       	adiw	r24, 0x01	; 1
 236:	19 df       	rcall	.-462    	; 0x6a <EERef::update(unsigned char)>
_Z11writeEEPROMv():
Q:\git\hans61\gtrom16\ROM_Switcher/ROM_Switcher.ino:117
  EEPROM.update(eepromAddr + 1, tmp);
  if (tmp == 0) {                           // switch to the next cell on overflow
 238:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <tmp>
 23c:	81 11       	cpse	r24, r1
 23e:	0e c0       	rjmp	.+28     	; 0x25c <writeEEPROM()+0x6e>
Q:\git\hans61\gtrom16\ROM_Switcher/ROM_Switcher.ino:118
    eepromAddr += 2;
 240:	80 91 7f 00 	lds	r24, 0x007F	; 0x80007f <eepromAddr>
 244:	8e 5f       	subi	r24, 0xFE	; 254
Q:\git\hans61\gtrom16\ROM_Switcher/ROM_Switcher.ino:119
    if (eepromAddr > 128) eepromAddr = 2;
 246:	81 38       	cpi	r24, 0x81	; 129
 248:	d0 f4       	brcc	.+52     	; 0x27e <writeEEPROM()+0x90>
Q:\git\hans61\gtrom16\ROM_Switcher/ROM_Switcher.ino:119 (discriminator 1)
 24a:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <eepromAddr>
Q:\git\hans61\gtrom16\ROM_Switcher/ROM_Switcher.ino:120 (discriminator 1)
    EEPROM.update(ADDR, eepromAddr);        // Set pointer to current cell
 24e:	60 91 7f 00 	lds	r22, 0x007F	; 0x80007f <eepromAddr>
_ZN5EERefC4Ei():
C:\Users\hjjac\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\EEPROM/EEPROM.h:50 (discriminator 1)
#endif

struct EERef{

    EERef( const int index )
        : index( index )                 {}
 252:	1a 82       	std	Y+2, r1	; 0x02
 254:	19 82       	std	Y+1, r1	; 0x01
_ZN11EEPROMClass6updateEih():
C:\Users\hjjac\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\EEPROM/EEPROM.h:137 (discriminator 1)

    //Basic user access methods.
    EERef operator[]( const int idx )    { return idx; }
    uint8_t read( int idx )              { return EERef( idx ); }
    void write( int idx, uint8_t val )   { (EERef( idx )) = val; }
    void update( int idx, uint8_t val )  { EERef( idx ).update( val ); }
 256:	ce 01       	movw	r24, r28
 258:	01 96       	adiw	r24, 0x01	; 1
 25a:	07 df       	rcall	.-498    	; 0x6a <EERef::update(unsigned char)>
_Z11writeEEPROMv():
Q:\git\hans61\gtrom16\ROM_Switcher/ROM_Switcher.ino:122
  }
  EEPROM.update(eepromAddr, romIdx);        // Save ROM index
 25c:	60 91 80 00 	lds	r22, 0x0080	; 0x800080 <romIdx>
 260:	80 91 7f 00 	lds	r24, 0x007F	; 0x80007f <eepromAddr>
 264:	90 e0       	ldi	r25, 0x00	; 0
_ZN5EERefC4Ei():
C:\Users\hjjac\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\EEPROM/EEPROM.h:50
#endif

struct EERef{

    EERef( const int index )
        : index( index )                 {}
 266:	9a 83       	std	Y+2, r25	; 0x02
 268:	89 83       	std	Y+1, r24	; 0x01
_ZN11EEPROMClass6updateEih():
C:\Users\hjjac\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\EEPROM/EEPROM.h:137

    //Basic user access methods.
    EERef operator[]( const int idx )    { return idx; }
    uint8_t read( int idx )              { return EERef( idx ); }
    void write( int idx, uint8_t val )   { (EERef( idx )) = val; }
    void update( int idx, uint8_t val )  { EERef( idx ).update( val ); }
 26a:	ce 01       	movw	r24, r28
 26c:	01 96       	adiw	r24, 0x01	; 1
 26e:	fd de       	rcall	.-518    	; 0x6a <EERef::update(unsigned char)>
_Z11writeEEPROMv():
Q:\git\hans61\gtrom16\ROM_Switcher/ROM_Switcher.ino:123
}
 270:	ce 5f       	subi	r28, 0xFE	; 254
 272:	cd bf       	out	0x3d, r28	; 61
 274:	df 91       	pop	r29
 276:	cf 91       	pop	r28
 278:	1f 91       	pop	r17
 27a:	0f 91       	pop	r16
 27c:	08 95       	ret
Q:\git\hans61\gtrom16\ROM_Switcher/ROM_Switcher.ino:119 (discriminator 1)
  tmp = EEPROM.read(eepromAddr + 1);        // Increase write counter for cell
  tmp--;
  EEPROM.update(eepromAddr + 1, tmp);
  if (tmp == 0) {                           // switch to the next cell on overflow
    eepromAddr += 2;
    if (eepromAddr > 128) eepromAddr = 2;
 27e:	82 e0       	ldi	r24, 0x02	; 2
 280:	e4 cf       	rjmp	.-56     	; 0x24a <writeEEPROM()+0x5c>

00000282 <setup>:
setup():
Q:\git\hans61\gtrom16\ROM_Switcher/ROM_Switcher.ino:126
  }
  EEPROM.update(eepromAddr, romIdx);        // Save ROM index
}

void setup() {
  DDRA = 0xFF;
 282:	8f ef       	ldi	r24, 0xFF	; 255
 284:	8a bb       	out	0x1a, r24	; 26
Q:\git\hans61\gtrom16\ROM_Switcher/ROM_Switcher.ino:127
  DDRB = 0x07; 	                            // 0b00000111;
 286:	87 e0       	ldi	r24, 0x07	; 7
 288:	87 bb       	out	0x17, r24	; 23
_ZNK5EERefdeEv():
C:\Users\hjjac\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\EEPROM/EEPROM.h:53

    EERef( const int index )
        : index( index )                 {}

    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	80 e0       	ldi	r24, 0x00	; 0
 28e:	fa d0       	rcall	.+500    	; 0x484 <eeprom_read_byte>
setup():
Q:\git\hans61\gtrom16\ROM_Switcher/ROM_Switcher.ino:128
  eepromAddr = EEPROM.read(ADDR) & 0b01111110;
 290:	8e 77       	andi	r24, 0x7E	; 126
 292:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <eepromAddr>
_ZNK5EERefdeEv():
C:\Users\hjjac\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\libraries\EEPROM/EEPROM.h:53
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	f5 d0       	rcall	.+490    	; 0x484 <eeprom_read_byte>
setup():
Q:\git\hans61\gtrom16\ROM_Switcher/ROM_Switcher.ino:130
  romIdx = EEPROM.read(eepromAddr);         // read default index from eeprom
  romIdx &= 0x0F;
 29a:	8f 70       	andi	r24, 0x0F	; 15
 29c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <romIdx>
Q:\git\hans61\gtrom16\ROM_Switcher/ROM_Switcher.ino:131
  setAddress(romIdx);
 2a0:	9a cf       	rjmp	.-204    	; 0x1d6 <setAddress(unsigned char)>

000002a2 <loop>:
loop():
Q:\git\hans61\gtrom16\ROM_Switcher/ROM_Switcher.ino:135
}

void loop() {
  if (romIdx != romLastIdx) {
 2a2:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <romIdx>
 2a6:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <romLastIdx>
 2aa:	89 17       	cp	r24, r25
 2ac:	49 f0       	breq	.+18     	; 0x2c0 <loop+0x1e>
Q:\git\hans61\gtrom16\ROM_Switcher/ROM_Switcher.ino:136
    setAddress(romIdx);          // activate selected bank
 2ae:	93 df       	rcall	.-218    	; 0x1d6 <setAddress(unsigned char)>
Q:\git\hans61\gtrom16\ROM_Switcher/ROM_Switcher.ino:137
    setDisplay(romIdx & 0x0F);   // show selected bank
 2b0:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <romIdx>
 2b4:	8f 70       	andi	r24, 0x0F	; 15
 2b6:	8b df       	rcall	.-234    	; 0x1ce <setDisplay(unsigned char)>
Q:\git\hans61\gtrom16\ROM_Switcher/ROM_Switcher.ino:138
    romLastIdx = romIdx;
 2b8:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <romIdx>
 2bc:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <romLastIdx>
Q:\git\hans61\gtrom16\ROM_Switcher/ROM_Switcher.ino:141
  }

  tmp = getButton();
 2c0:	eb de       	rcall	.-554    	; 0x98 <getButton()>
 2c2:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <tmp>
Q:\git\hans61\gtrom16\ROM_Switcher/ROM_Switcher.ino:142
  if (tmp == 6) {
 2c6:	86 30       	cpi	r24, 0x06	; 6
 2c8:	d1 f4       	brne	.+52     	; 0x2fe <loop+0x5c>
Q:\git\hans61\gtrom16\ROM_Switcher/ROM_Switcher.ino:143
    if (saveEeprom == 0) {
 2ca:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 2ce:	81 11       	cpse	r24, r1
 2d0:	20 c0       	rjmp	.+64     	; 0x312 <loop+0x70>
Q:\git\hans61\gtrom16\ROM_Switcher/ROM_Switcher.ino:144
      saveEeprom = 1;
 2d2:	81 e0       	ldi	r24, 0x01	; 1
 2d4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
Q:\git\hans61\gtrom16\ROM_Switcher/ROM_Switcher.ino:145
      writeEEPROM();
 2d8:	8a df       	rcall	.-236    	; 0x1ee <writeEEPROM()>
_Z10setDisplayh():
 2da:	82 e1       	ldi	r24, 0x12	; 18
 2dc:	bc de       	rcall	.-648    	; 0x56 <setDisplay(unsigned char) [clone .part.3]>
loop():
Q:\git\hans61\gtrom16\ROM_Switcher/ROM_Switcher.ino:147
      setDisplay(18);            // signal put the bank on display
      delay(500);
 2de:	64 ef       	ldi	r22, 0xF4	; 244
 2e0:	71 e0       	ldi	r23, 0x01	; 1
 2e2:	80 e0       	ldi	r24, 0x00	; 0
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	93 d0       	rcall	.+294    	; 0x40e <delay>
_Z10setDisplayh():
 2e8:	83 e1       	ldi	r24, 0x13	; 19
 2ea:	b5 de       	rcall	.-662    	; 0x56 <setDisplay(unsigned char) [clone .part.3]>
loop():
Q:\git\hans61\gtrom16\ROM_Switcher/ROM_Switcher.ino:149
      setDisplay(19);
      delay(500);
 2ec:	64 ef       	ldi	r22, 0xF4	; 244
 2ee:	71 e0       	ldi	r23, 0x01	; 1
 2f0:	80 e0       	ldi	r24, 0x00	; 0
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	8c d0       	rcall	.+280    	; 0x40e <delay>
Q:\git\hans61\gtrom16\ROM_Switcher/ROM_Switcher.ino:150
      setDisplay(romIdx & 0x0F);
 2f6:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <romIdx>
 2fa:	8f 70       	andi	r24, 0x0F	; 15
 2fc:	68 cf       	rjmp	.-304    	; 0x1ce <setDisplay(unsigned char)>
Q:\git\hans61\gtrom16\ROM_Switcher/ROM_Switcher.ino:152
    }
  } else if (tmp == 3) {        // key pressed, switch to the next bank
 2fe:	83 30       	cpi	r24, 0x03	; 3
 300:	41 f4       	brne	.+16     	; 0x312 <loop+0x70>
Q:\git\hans61\gtrom16\ROM_Switcher/ROM_Switcher.ino:153
    romIdx++;
 302:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <romIdx>
 306:	8f 5f       	subi	r24, 0xFF	; 255
Q:\git\hans61\gtrom16\ROM_Switcher/ROM_Switcher.ino:154
    romIdx &= 0x0F;
 308:	8f 70       	andi	r24, 0x0F	; 15
 30a:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <romIdx>
Q:\git\hans61\gtrom16\ROM_Switcher/ROM_Switcher.ino:155
    saveEeprom = 0;
 30e:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
Q:\git\hans61\gtrom16\ROM_Switcher/ROM_Switcher.ino:163
    //romIdx = 0;
  } else if (tmp == 5) {        // key pressed very long, reset bank to 0
    //romIdx = 0;
  }
  //delay(10);
}
 312:	08 95       	ret

00000314 <__vector_11>:
__vector_11():
C:\Users\hjjac\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:983

uint8_t read_factory_calibration(void)
{
  uint8_t value = boot_signature_byte_get(1);
  return value;
}
 314:	1f 92       	push	r1
 316:	0f 92       	push	r0
 318:	0f b6       	in	r0, 0x3f	; 63
 31a:	0f 92       	push	r0
 31c:	11 24       	eor	r1, r1
 31e:	2f 93       	push	r18
 320:	3f 93       	push	r19
 322:	8f 93       	push	r24
 324:	9f 93       	push	r25
 326:	af 93       	push	r26
 328:	bf 93       	push	r27
 32a:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <millis_timer_millis>
 32e:	90 91 84 00 	lds	r25, 0x0084	; 0x800084 <millis_timer_millis+0x1>
 332:	a0 91 85 00 	lds	r26, 0x0085	; 0x800085 <millis_timer_millis+0x2>
 336:	b0 91 86 00 	lds	r27, 0x0086	; 0x800086 <millis_timer_millis+0x3>
 33a:	30 91 82 00 	lds	r19, 0x0082	; 0x800082 <millis_timer_fract>
 33e:	26 e0       	ldi	r18, 0x06	; 6
 340:	23 0f       	add	r18, r19
 342:	2d 37       	cpi	r18, 0x7D	; 125
 344:	68 f1       	brcs	.+90     	; 0x3a0 <__vector_11+0x8c>
 346:	29 e8       	ldi	r18, 0x89	; 137
 348:	23 0f       	add	r18, r19
 34a:	03 96       	adiw	r24, 0x03	; 3
 34c:	a1 1d       	adc	r26, r1
 34e:	b1 1d       	adc	r27, r1
 350:	20 93 82 00 	sts	0x0082, r18	; 0x800082 <millis_timer_fract>
 354:	80 93 83 00 	sts	0x0083, r24	; 0x800083 <millis_timer_millis>
 358:	90 93 84 00 	sts	0x0084, r25	; 0x800084 <millis_timer_millis+0x1>
 35c:	a0 93 85 00 	sts	0x0085, r26	; 0x800085 <millis_timer_millis+0x2>
 360:	b0 93 86 00 	sts	0x0086, r27	; 0x800086 <millis_timer_millis+0x3>
 364:	80 91 87 00 	lds	r24, 0x0087	; 0x800087 <millis_timer_overflow_count>
 368:	90 91 88 00 	lds	r25, 0x0088	; 0x800088 <millis_timer_overflow_count+0x1>
 36c:	a0 91 89 00 	lds	r26, 0x0089	; 0x800089 <millis_timer_overflow_count+0x2>
 370:	b0 91 8a 00 	lds	r27, 0x008A	; 0x80008a <millis_timer_overflow_count+0x3>
 374:	01 96       	adiw	r24, 0x01	; 1
 376:	a1 1d       	adc	r26, r1
 378:	b1 1d       	adc	r27, r1
 37a:	80 93 87 00 	sts	0x0087, r24	; 0x800087 <millis_timer_overflow_count>
 37e:	90 93 88 00 	sts	0x0088, r25	; 0x800088 <millis_timer_overflow_count+0x1>
 382:	a0 93 89 00 	sts	0x0089, r26	; 0x800089 <millis_timer_overflow_count+0x2>
 386:	b0 93 8a 00 	sts	0x008A, r27	; 0x80008a <millis_timer_overflow_count+0x3>
 38a:	bf 91       	pop	r27
 38c:	af 91       	pop	r26
 38e:	9f 91       	pop	r25
 390:	8f 91       	pop	r24
 392:	3f 91       	pop	r19
 394:	2f 91       	pop	r18
 396:	0f 90       	pop	r0
 398:	0f be       	out	0x3f, r0	; 63
 39a:	0f 90       	pop	r0
 39c:	1f 90       	pop	r1
 39e:	18 95       	reti
 3a0:	02 96       	adiw	r24, 0x02	; 2
 3a2:	a1 1d       	adc	r26, r1
 3a4:	b1 1d       	adc	r27, r1
 3a6:	d4 cf       	rjmp	.-88     	; 0x350 <__vector_11+0x3c>

000003a8 <millis>:
millis():
 3a8:	2f b7       	in	r18, 0x3f	; 63
 3aa:	f8 94       	cli
 3ac:	60 91 83 00 	lds	r22, 0x0083	; 0x800083 <millis_timer_millis>
 3b0:	70 91 84 00 	lds	r23, 0x0084	; 0x800084 <millis_timer_millis+0x1>
 3b4:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <millis_timer_millis+0x2>
 3b8:	90 91 86 00 	lds	r25, 0x0086	; 0x800086 <millis_timer_millis+0x3>
 3bc:	2f bf       	out	0x3f, r18	; 63
 3be:	08 95       	ret

000003c0 <micros>:
micros():
 3c0:	3f b7       	in	r19, 0x3f	; 63
 3c2:	f8 94       	cli
 3c4:	80 91 87 00 	lds	r24, 0x0087	; 0x800087 <millis_timer_overflow_count>
 3c8:	90 91 88 00 	lds	r25, 0x0088	; 0x800088 <millis_timer_overflow_count+0x1>
 3cc:	a0 91 89 00 	lds	r26, 0x0089	; 0x800089 <millis_timer_overflow_count+0x2>
 3d0:	b0 91 8a 00 	lds	r27, 0x008A	; 0x80008a <millis_timer_overflow_count+0x3>
 3d4:	22 b7       	in	r18, 0x32	; 50
 3d6:	08 b6       	in	r0, 0x38	; 56
 3d8:	00 fe       	sbrs	r0, 0
 3da:	05 c0       	rjmp	.+10     	; 0x3e6 <micros+0x26>
 3dc:	2f 3f       	cpi	r18, 0xFF	; 255
 3de:	19 f0       	breq	.+6      	; 0x3e6 <micros+0x26>
 3e0:	01 96       	adiw	r24, 0x01	; 1
 3e2:	a1 1d       	adc	r26, r1
 3e4:	b1 1d       	adc	r27, r1
 3e6:	3f bf       	out	0x3f, r19	; 63
 3e8:	ba 2f       	mov	r27, r26
 3ea:	a9 2f       	mov	r26, r25
 3ec:	98 2f       	mov	r25, r24
 3ee:	88 27       	eor	r24, r24
 3f0:	bc 01       	movw	r22, r24
 3f2:	cd 01       	movw	r24, r26
 3f4:	62 0f       	add	r22, r18
 3f6:	71 1d       	adc	r23, r1
 3f8:	81 1d       	adc	r24, r1
 3fa:	91 1d       	adc	r25, r1
 3fc:	43 e0       	ldi	r20, 0x03	; 3
 3fe:	66 0f       	add	r22, r22
 400:	77 1f       	adc	r23, r23
 402:	88 1f       	adc	r24, r24
 404:	99 1f       	adc	r25, r25
 406:	4a 95       	dec	r20
 408:	d1 f7       	brne	.-12     	; 0x3fe <micros+0x3e>
 40a:	08 95       	ret

0000040c <yield>:
__empty():
 40c:	08 95       	ret

0000040e <delay>:
delay():
 40e:	cf 92       	push	r12
 410:	df 92       	push	r13
 412:	ef 92       	push	r14
 414:	ff 92       	push	r15
 416:	cf 93       	push	r28
 418:	df 93       	push	r29
 41a:	6b 01       	movw	r12, r22
 41c:	7c 01       	movw	r14, r24
 41e:	d0 df       	rcall	.-96     	; 0x3c0 <micros>
 420:	eb 01       	movw	r28, r22
 422:	c1 14       	cp	r12, r1
 424:	d1 04       	cpc	r13, r1
 426:	e1 04       	cpc	r14, r1
 428:	f1 04       	cpc	r15, r1
 42a:	61 f0       	breq	.+24     	; 0x444 <delay+0x36>
 42c:	ef df       	rcall	.-34     	; 0x40c <yield>
 42e:	c8 df       	rcall	.-112    	; 0x3c0 <micros>
 430:	6c 1b       	sub	r22, r28
 432:	7d 0b       	sbc	r23, r29
 434:	68 3e       	cpi	r22, 0xE8	; 232
 436:	73 40       	sbci	r23, 0x03	; 3
 438:	a0 f3       	brcs	.-24     	; 0x422 <delay+0x14>
 43a:	c1 14       	cp	r12, r1
 43c:	d1 04       	cpc	r13, r1
 43e:	e1 04       	cpc	r14, r1
 440:	f1 04       	cpc	r15, r1
 442:	39 f4       	brne	.+14     	; 0x452 <delay+0x44>
 444:	df 91       	pop	r29
 446:	cf 91       	pop	r28
 448:	ff 90       	pop	r15
 44a:	ef 90       	pop	r14
 44c:	df 90       	pop	r13
 44e:	cf 90       	pop	r12
 450:	08 95       	ret
 452:	81 e0       	ldi	r24, 0x01	; 1
 454:	c8 1a       	sub	r12, r24
 456:	d1 08       	sbc	r13, r1
 458:	e1 08       	sbc	r14, r1
 45a:	f1 08       	sbc	r15, r1
 45c:	c8 51       	subi	r28, 0x18	; 24
 45e:	dc 4f       	sbci	r29, 0xFC	; 252
 460:	e6 cf       	rjmp	.-52     	; 0x42e <delay+0x20>

00000462 <init>:
init():
C:\Users\hjjac\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:1138
*/

  // Use the Millis Timer for fast PWM (unless it doesn't have an output).
  #if (TIMER_TO_USE_FOR_MILLIS == 0)
    #if defined(WGM01) // if Timer0 has PWM
      TCCR0A = (1<<WGM01) | (1<<WGM00);
 462:	83 e0       	ldi	r24, 0x03	; 3
 464:	80 bf       	out	0x30, r24	; 48
C:\Users\hjjac\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:1141
    #endif
    #if defined(TCCR0B) //The x61 has a wacky Timer0!
      TCCR0B = (MillisTimer_Prescale_Index << CS00);
 466:	83 bf       	out	0x33, r24	; 51
C:\Users\hjjac\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:1162
    TCCR1A = 1<<WGM10;
    TCCR1B = (1<<WGM12) | (MillisTimer_Prescale_Index << CS10);
  #endif

  // this needs to be called before setup() or some functions won't work there
  sei();
 468:	78 94       	sei
C:\Users\hjjac\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:1169
  #ifndef DISABLEMILLIS
    // Enable the overflow interrupt (this is the basic system tic-toc for millis)
    #if defined(TIMSK) && defined(TOIE0) && (TIMER_TO_USE_FOR_MILLIS == 0)
      sbi(TIMSK, TOIE0);
    #elif defined(TIMSK0) && defined(TOIE0) && (TIMER_TO_USE_FOR_MILLIS == 0)
      sbi(TIMSK0, TOIE0);
 46a:	99 b7       	in	r25, 0x39	; 57
 46c:	91 60       	ori	r25, 0x01	; 1
 46e:	99 bf       	out	0x39, r25	; 57
initToneTimerInternal():
C:\Users\hjjac\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:972
    #elif (TIMER_TO_USE_FOR_TONE == 1 ) && defined(__AVR_ATtinyX7__)
      TCCR1A = (1<<COM1A1)|(1<<COM1B1)|(1<<WGM10);
      TCCR1B = (ToneTimer_Prescale_Index << CS10);
    #elif (TIMER_TO_USE_FOR_TONE == 1) // x4, x8, x313,
      // Use the Tone Timer for phase correct PWM
      TCCR1A = (1<<WGM10);
 470:	91 e0       	ldi	r25, 0x01	; 1
 472:	9f bd       	out	0x2f, r25	; 47
C:\Users\hjjac\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:973
      TCCR1B = (0<<WGM12) | (0<<WGM13) | (ToneTimer_Prescale_Index << CS10); //set the clock
 474:	8e bd       	out	0x2e, r24	; 46
init():
C:\Users\hjjac\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:1214
  #if defined( INITIALIZE_ANALOG_TO_DIGITAL_CONVERTER ) && INITIALIZE_ANALOG_TO_DIGITAL_CONVERTER
    #if defined(ADCSRA)
      // set a2d prescale factor
      // ADCSRA = (ADCSRA & ~((1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0))) | (ADC_ARDUINO_PRESCALER << ADPS0) | (1<<ADEN);
      // dude, this is being called on startup. We know that ADCSRA is 0! Why add a RMW cycle?!
      ADCSRA = (ADC_ARDUINO_PRESCALER << ADPS0) | (1<<ADEN);
 476:	86 e8       	ldi	r24, 0x86	; 134
 478:	86 b9       	out	0x06, r24	; 6
C:\Users\hjjac\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/wiring.c:1219
      // enable a2d conversions
      // sbi(ADCSRA, ADEN); //we already set this!!!
    #endif
  #endif
}
 47a:	08 95       	ret

0000047c <main>:
main():
C:\Users\hjjac\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/main.cpp:5
#include <Arduino.h>

int main(void)
{
  init();
 47c:	f2 df       	rcall	.-28     	; 0x462 <init>
C:\Users\hjjac\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/main.cpp:7

  setup();
 47e:	01 df       	rcall	.-510    	; 0x282 <setup>
C:\Users\hjjac\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tiny/main.cpp:10 (discriminator 1)

  for (;;)
    loop();
 480:	10 df       	rcall	.-480    	; 0x2a2 <loop>
 482:	fe cf       	rjmp	.-4      	; 0x480 <main+0x4>

00000484 <eeprom_read_byte>:
eeprom_read_byte():
 484:	e1 99       	sbic	0x1c, 1	; 28
 486:	fe cf       	rjmp	.-4      	; 0x484 <eeprom_read_byte>
 488:	1f ba       	out	0x1f, r1	; 31
 48a:	8e bb       	out	0x1e, r24	; 30
 48c:	e0 9a       	sbi	0x1c, 0	; 28
 48e:	99 27       	eor	r25, r25
 490:	8d b3       	in	r24, 0x1d	; 29
 492:	08 95       	ret

00000494 <eeprom_write_byte>:
eeprom_write_byte():
 494:	26 2f       	mov	r18, r22

00000496 <eeprom_write_r18>:
 496:	e1 99       	sbic	0x1c, 1	; 28
 498:	fe cf       	rjmp	.-4      	; 0x496 <eeprom_write_r18>
 49a:	1c ba       	out	0x1c, r1	; 28
 49c:	1f ba       	out	0x1f, r1	; 31
 49e:	8e bb       	out	0x1e, r24	; 30
 4a0:	2d bb       	out	0x1d, r18	; 29
 4a2:	0f b6       	in	r0, 0x3f	; 63
 4a4:	f8 94       	cli
 4a6:	e2 9a       	sbi	0x1c, 2	; 28
 4a8:	e1 9a       	sbi	0x1c, 1	; 28
 4aa:	0f be       	out	0x3f, r0	; 63
 4ac:	01 96       	adiw	r24, 0x01	; 1
 4ae:	08 95       	ret

000004b0 <_exit>:
exit():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/tiny-stack/libgcc/../../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
 4b0:	f8 94       	cli

000004b2 <__stop_program>:
__stop_program():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/tiny-stack/libgcc/../../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
 4b2:	ff cf       	rjmp	.-2      	; 0x4b2 <__stop_program>
